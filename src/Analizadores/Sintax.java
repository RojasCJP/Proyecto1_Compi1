
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import Arbol.Nodo;
import java_cup.runtime.XMLElement;

import java.util.ArrayList;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {
    public ArrayList meVaAServir = new ArrayList();

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public Sintax() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public Sintax(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\026\000\002\002\004\000\002\011\005\000\002\010" +
                            "\004\000\002\010\003\000\002\010\004\000\002\010\003" +
                            "\000\002\010\004\000\002\010\003\000\002\010\004\000" +
                            "\002\010\003\000\002\007\005\000\002\006\006\000\002" +
                            "\005\006\000\002\004\005\000\002\004\005\000\002\004" +
                            "\004\000\002\004\004\000\002\004\004\000\002\004\003" +
                            "\000\002\004\003\000\002\003\010\000\002\002\004"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\056\000\004\007\005\001\002\000\004\002\060\001" +
                            "\002\000\010\004\010\005\014\024\013\001\002\000\012" +
                            "\004\ufffe\005\ufffe\010\ufffe\024\ufffe\001\002\000\012\004" +
                            "\ufffa\005\ufffa\010\ufffa\024\ufffa\001\002\000\004\015\053" +
                            "\001\002\000\012\004\ufff8\005\ufff8\010\ufff8\024\ufff8\001" +
                            "\002\000\012\004\010\005\014\010\046\024\013\001\002" +
                            "\000\004\024\045\001\002\000\006\015\017\027\016\001" +
                            "\002\000\012\004\ufffc\005\ufffc\010\ufffc\024\ufffc\001\002" +
                            "\000\020\007\031\012\023\016\026\017\022\020\030\021" +
                            "\032\026\024\001\002\000\004\026\020\001\002\000\004" +
                            "\014\021\001\002\000\012\004\ufff6\005\ufff6\010\ufff6\024" +
                            "\ufff6\001\002\000\020\007\031\012\023\016\026\017\022" +
                            "\020\030\021\032\026\024\001\002\000\020\007\031\012" +
                            "\023\016\026\017\022\020\030\021\032\026\024\001\002" +
                            "\000\022\007\uffef\012\uffef\014\uffef\016\uffef\017\uffef\020" +
                            "\uffef\021\uffef\026\uffef\001\002\000\004\014\041\001\002" +
                            "\000\020\007\031\012\023\016\026\017\022\020\030\021" +
                            "\032\026\024\001\002\000\022\007\uffee\012\uffee\014\uffee" +
                            "\016\uffee\017\uffee\020\uffee\021\uffee\026\uffee\001\002\000" +
                            "\020\007\031\012\023\016\026\017\022\020\030\021\032" +
                            "\026\024\001\002\000\004\005\034\001\002\000\020\007" +
                            "\031\012\023\016\026\017\022\020\030\021\032\026\024" +
                            "\001\002\000\022\007\ufff0\012\ufff0\014\ufff0\016\ufff0\017" +
                            "\ufff0\020\ufff0\021\ufff0\026\ufff0\001\002\000\004\010\035" +
                            "\001\002\000\022\007\ufff7\012\ufff7\014\ufff7\016\ufff7\017" +
                            "\ufff7\020\ufff7\021\ufff7\026\ufff7\001\002\000\022\007\ufff1" +
                            "\012\ufff1\014\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\026" +
                            "\ufff1\001\002\000\020\007\031\012\023\016\026\017\022" +
                            "\020\030\021\032\026\024\001\002\000\022\007\ufff3\012" +
                            "\ufff3\014\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\026\ufff3" +
                            "\001\002\000\012\004\ufff5\005\ufff5\010\ufff5\024\ufff5\001" +
                            "\002\000\020\007\031\012\023\016\026\017\022\020\030" +
                            "\021\032\026\024\001\002\000\022\007\ufff4\012\ufff4\014" +
                            "\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\026\ufff4\001\002" +
                            "\000\022\007\ufff2\012\ufff2\014\ufff2\016\ufff2\017\ufff2\020" +
                            "\ufff2\021\ufff2\026\ufff2\001\002\000\012\004\uffec\005\uffec" +
                            "\010\uffec\024\uffec\001\002\000\004\002\000\001\002\000" +
                            "\012\004\uffff\005\uffff\010\uffff\024\uffff\001\002\000\012" +
                            "\004\ufffb\005\ufffb\010\ufffb\024\ufffb\001\002\000\012\004" +
                            "\ufff9\005\ufff9\010\ufff9\024\ufff9\001\002\000\012\004\ufffd" +
                            "\005\ufffd\010\ufffd\024\ufffd\001\002\000\004\005\054\001" +
                            "\002\000\004\027\055\001\002\000\004\011\056\001\002" +
                            "\000\004\014\057\001\002\000\012\004\uffed\005\uffed\010" +
                            "\uffed\024\uffed\001\002\000\004\002\001\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\056\000\004\011\003\001\001\000\002\001\001\000" +
                            "\014\002\010\003\005\005\014\006\006\010\011\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\012\002\050\003\046\005\051\006\047" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\006\004\024\007\026\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\006\004\043\007" +
                            "\026\001\001\000\006\004\041\007\026\001\001\000\002" +
                            "\001\001\000\002\001\001\000\006\004\036\007\026\001" +
                            "\001\000\002\001\001\000\006\004\035\007\026\001\001" +
                            "\000\002\001\001\000\006\004\032\007\026\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\006\004\037\007\026\001\001\000\002\001" +
                            "\001\000\002\001\001\000\006\004\042\007\026\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Sintax$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Sintax$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }


    private Symbol s;

    public void syntax_error(Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }


    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Sintax$actions {
        private final Sintax parser;

        /**
         * Constructor
         */
        CUP$Sintax$actions(Sintax parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
                int CUP$Sintax$act_num,
                java_cup.runtime.lr_parser CUP$Sintax$parser,
                java.util.Stack CUP$Sintax$stack,
                int CUP$Sintax$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Sintax$result;

            /* select the action based on the action number */
            switch (CUP$Sintax$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= INICIO EOF
                {
                    Object RESULT         = null;
                    int    start_valleft  = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int    start_valright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    Object start_val      = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    RESULT = start_val;
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Sintax$parser.done_parsing();
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // INICIO ::= Llave_Abre CONTENIDO Llave_Cierra
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO", 7, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // CONTENIDO ::= CONTENIDO DECLARACION_CONJUNTOS
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO", 6, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // CONTENIDO ::= DECLARACION_CONJUNTOS
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO", 6, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // CONTENIDO ::= CONTENIDO DECLARACION_REGEX
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO", 6, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // CONTENIDO ::= DECLARACION_REGEX
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO", 6, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // CONTENIDO ::= CONTENIDO PREGUNTA_REGEX
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO", 6, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // CONTENIDO ::= PREGUNTA_REGEX
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO", 6, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // CONTENIDO ::= CONTENIDO PORCENTAJES
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO", 6, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // CONTENIDO ::= PORCENTAJES
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO", 6, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // GRUPO ::= Llave_Abre Identificador Llave_Cierra
                {
                    String RESULT = null;
                    int    aleft  = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int    aright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String a      = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    RESULT = "{" + a + "}";
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRUPO", 5, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // PREGUNTA_REGEX ::= Identificador Dos_Puntos Cadena Punto_Coma
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PREGUNTA_REGEX", 4, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // DECLARACION_REGEX ::= Identificador Asignacion REGEX Punto_Coma
                {
                    Object RESULT = null;
                    int    aleft  = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int    aright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    Nodo   a      = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    System.out.println("El valor de la expresión es: " + a.getValue());
                    System.out.println("La expresion regular es: " + a.getValorNodo());
                    if (a != null) {
                        meVaAServir.add(a.getValorNodo());
                    }
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_REGEX", 3, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // REGEX ::= Punto REGEX REGEX
                {
                    Nodo RESULT = null;
                    int  aleft  = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int  aright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    Nodo a      = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int  bleft  = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int  bright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    Nodo b      = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = new Nodo(".", a, b);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGEX", 2, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // REGEX ::= Or REGEX REGEX
                {
                    Nodo RESULT = null;
                    int  aleft  = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int  aright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    Nodo a      = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int  bleft  = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int  bright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    Nodo b      = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = new Nodo("|", a, b);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGEX", 2, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // REGEX ::= Asterizco REGEX
                {
                    Nodo RESULT = null;
                    int  aleft  = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int  aright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    Nodo a      = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = new Nodo("*", a, null);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGEX", 2, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // REGEX ::= Suma REGEX
                {
                    Nodo RESULT = null;
                    int  aleft  = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int  aright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    Nodo a      = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = new Nodo("+", a, null);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGEX", 2, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // REGEX ::= Interrogacion REGEX
                {
                    Nodo RESULT = null;
                    int  aleft  = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int  aright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    Nodo a      = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = new Nodo("?", a, null);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGEX", 2, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // REGEX ::= Cadena
                {
                    Nodo   RESULT = null;
                    int    aleft  = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int    aright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String a      = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = new Nodo(a, null, null);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGEX", 2, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // REGEX ::= GRUPO
                {
                    Nodo   RESULT = null;
                    int    aleft  = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int    aright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String a      = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = new Nodo(a, null, null);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGEX", 2, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // DECLARACION_CONJUNTOS ::= CONJ Dos_Puntos Identificador Asignacion Guion Punto_Coma
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONJUNTOS", 1, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // PORCENTAJES ::= Porcentaje Porcentaje
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PORCENTAJES", 0, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Sintax$act_num + "found in internal parse table");

            }
        } /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$Sintax$do_action(
                int CUP$Sintax$act_num,
                java_cup.runtime.lr_parser CUP$Sintax$parser,
                java.util.Stack CUP$Sintax$stack,
                int CUP$Sintax$top)
                throws java.lang.Exception {
            return CUP$Sintax$do_action_part00000000(
                    CUP$Sintax$act_num,
                    CUP$Sintax$parser,
                    CUP$Sintax$stack,
                    CUP$Sintax$top);
        }
    }

}
