package Analizadores;

import java_cup.runtime.Symbol;
import Arbol.Nodo;
import java.util.ArrayList;
import Graficador.GraficadorErrores;
import Regex.Conjuntos;
import Regex.AnalizadorRegex;

parser code
{:
public ArrayList meVaAServir = new ArrayList();
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
        GraficadorErrores.errores += "<tr><td>" + GraficadorErrores.contador + "</td><td>Sintactico</td><td>El token encontrado no concuerda con lo esperado</td><td>" + (s.right+1) + "</td><td>" + (s.left+1) + "</td></tr>\n";
        GraficadorErrores.contador++;
    }

    public Symbol getS(){
        return this.s;
    }
:};

terminal CONJ;
terminal String Identificador;
terminal Numero;
terminal String Llave_Abre;
terminal String Llave_Cierra;
terminal String Guion;
terminal Punto;
terminal String Coma;
terminal Punto_Coma;
terminal Dos_Puntos;
terminal Or;
terminal Asterizco;
terminal Suma;
terminal Interrogacion;
terminal Comentario_Multi_Abre;
terminal Comentario_Multi_Cierra;
terminal Porcentaje;
terminal Linea;
terminal String Cadena;
terminal String Especial;
terminal Asignacion;
terminal ERROR;

non terminal PORCENTAJES;
non terminal DECLARACION_CONJUNTOS;
non terminal Nodo REGEX;
non terminal String CONJUNTO;
non terminal DECLARACION_REGEX;
non terminal PREGUNTA_REGEX;
non terminal String GRUPO;
non terminal CONTENIDO;
non terminal INICIO;

start with INICIO;

INICIO ::=
    Llave_Abre CONTENIDO Llave_Cierra
;

CONTENIDO ::=
    CONTENIDO DECLARACION_CONJUNTOS |
    DECLARACION_CONJUNTOS |
    CONTENIDO DECLARACION_REGEX |
    DECLARACION_REGEX |
    CONTENIDO PREGUNTA_REGEX |
    PREGUNTA_REGEX |
    CONTENIDO PORCENTAJES |
    PORCENTAJES |
    CONTENIDO error Punto_Coma|
    error Punto_Coma
;

GRUPO ::=
    Llave_Abre Identificador:a Llave_Cierra {:RESULT="{"+a+"}";:}
;

PREGUNTA_REGEX ::=
    Identificador:id Dos_Puntos Cadena:a Punto_Coma{:if (AnalizadorRegex.cadenas.get(id) == null) {
                                                                 ArrayList nuevo = new ArrayList();
                                                                 nuevo.add(a);
                                                                 AnalizadorRegex.cadenas.put(id,nuevo);
                                                             } else {
                                                                 ((ArrayList)AnalizadorRegex.cadenas.get(id)).add(a);
                                                             };:}
;

DECLARACION_REGEX ::=
    Identificador:id Asignacion REGEX:a Punto_Coma {:System.out.println("El valor de la expresi√≥n es: "+a.getValue());
    System.out.println("La expresion regular es: " + a.getValorNodo());
                        if (a != null) {
           meVaAServir.add(a);
       }
    AnalizadorRegex.nombres.add(id);
    :}
;

REGEX ::=
    Punto REGEX:a REGEX:b {:RESULT=new Nodo(".",a,b);:}|
    Or REGEX:a REGEX:b {:RESULT=new Nodo("|",a,b);:}|
    Asterizco REGEX:a {:RESULT=new Nodo("*",a,null);:}|
    Suma REGEX:a {:RESULT=new Nodo("+",a,null);:}|
    Interrogacion REGEX:a {:RESULT=new Nodo("?",a,null);:}|
    Cadena:a {:RESULT=new Nodo(a,null,null);:} |
    Especial:a {:RESULT=new Nodo(a,null,null);:} |
    GRUPO:a {:RESULT=new Nodo(a,null,null);:}

;

CONJUNTO ::=
        Coma:a CONJUNTO:b {:RESULT=b += a;:} |
        Coma:a {:RESULT=a;:}
;

DECLARACION_CONJUNTOS ::=
    CONJ Dos_Puntos Identificador:nombre Asignacion Guion:a Punto_Coma {:Conjuntos.todosConjuntos.add(new Conjuntos(nombre,a));:}|
    CONJ Dos_Puntos Identificador:nombre Asignacion CONJUNTO:a {:Conjuntos.todosConjuntos.add(new Conjuntos(nombre,a));:}
;

PORCENTAJES ::=
    Porcentaje Porcentaje
;